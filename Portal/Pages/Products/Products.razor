@page "/products"
@inject IProductEndpoint ProductEndpoint
@inject IConfiguration Config
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Cashier")]

<h3>Products</h3>

<div class="h4">
    <div class="col-md-2">
        <button type="button" class="btn btn-primary btn-success" @onclick=GoToNewProductForm>Add new</button>
    </div>
</div>

<div class="container-fluid">
    @if(products is null)
    {
        <div class="row">
            <p>There was an issue loading products.</p>
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var item in products) 
            {
                <div class="col-xxl-4 col-lg-6 mb-3">
                    <div class="container">
                        <div class="row">
                            <div class="col-12">
                                <a href="">
                                    @if(string.IsNullOrWhiteSpace(item.ProductImage))
                                    {
                                        <img src="https://dummyimage.com/100x100/000000/ffffff&text=Coming+Soon" class="img-fluid" alt="Placeholder Image" />
                                    }
                                    else
                                    {
                                        <img src="@($"{apiUrl}{item.ProductImage}")" class="img-fluid" alt="@item.ProductName" width="100" height="100" />
                                    }
                                </a>
                                <p class="my-2 text-justify">
                                    <strong>@item.Description</strong>
                                </p>
                                <p class="mb-1">
                                    <strong>Quantity: </strong> @item.QuantityInStock
                                </p>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-12">
                                <p class="h5 mb-3"> @item.ProductName - $@item.RetailPrice</p>
                                <CellDisplayTemplate>
                                    <a class="oi oi-pencil" @onclick="@(() => ShowEditModal(item))" style="text-decoration: none;" href="javascript:void(0);"></a>
                                    <a class="oi oi-x" @onclick="@(() => DeleteProduct(item.Id))" style="text-decoration: none;" href="javascript:void(0);"></a>
                                </CellDisplayTemplate>
                            </div>
                        </div>
                    </div>
                </div>
                <EditProduct model="item" @ref="modals[item.Id]" />
            }
        </div>
    }
</div>

@code {
    private List<ProductModel> products = new();
    private string apiUrl;
    private const string localStorageProductsKey = "products";
    private const string localStorageProductsCacheDateKey = "productCacheDate";

    protected override async Task OnInitializedAsync()
    {
        apiUrl = Config.GetValue<string>("api");

        products = await localStorage.GetItemAsync<List<ProductModel>>(localStorageProductsKey);
        DateTime? cacheDate = await localStorage.GetItemAsync<DateTime?>(localStorageProductsCacheDateKey);
        double cacheAge = 0;

        if (cacheDate is not null)
        {
            cacheAge = DateTime.UtcNow.Subtract((DateTime)cacheDate).TotalMinutes;
        }

        if (products is null || cacheDate is null || cacheAge > 10)
        {
            try
            {
                products = await ProductEndpoint.GetAllProducts();
                await localStorage.SetItemAsync(localStorageProductsKey, products);
                await localStorage.SetItemAsync(localStorageProductsCacheDateKey, DateTime.UtcNow);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }
    }

    private void GoToNewProductForm()
    {
        navManager.NavigateTo("/products/add");
    }

    private async Task DeleteProduct(int id)
    {
        await ProductEndpoint.DeleteProduct(id);
        await localStorage.RemoveItemAsync(localStorageProductsKey);
        await OnInitializedAsync();
    }

    private Dictionary<int, EditProduct> modals = new Dictionary<int, EditProduct>();

    private void ShowEditModal(ProductModel model)
    {
        modals[model.Id].Show();
    }
}
