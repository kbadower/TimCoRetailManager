@inject IAuthenticationService AuthService
@inject NavigationManager NavManager


<EditForm Model="model" OnValidSubmit="ExecuteLogin">

    <div class="row">
        <div class="col-auto">
            <label for="email" class="visually-hidden">Email</label>
            <InputText id="email" class="form-control" @bind-Value="model.Email" placeholder="Email Address"/>
        </div>

        <div class="col-auto">
            <label for="email" class="visually-hidden">Password</label>
            <InputText id="email" type="password" class="form-control" @bind-Value="model.Password" placeholder="Password" />
        </div>

        <div class="col-auto">
            <button type="submit" class="btn btn-success">Login</button>
        </div>

        <div class="col-auto">
            <button type="button" class="btn btn-primary" @onclick=Register>Register</button>
        </div>
    </div>

</EditForm>

@if (showAuthenticationError)
{
    <div class="row">
        <div class="alert alert-danger p-2" role="alert">
            @authenticationErrorText
        </div>
    </div>
}

@code {
    AuthenticationUserModel model = new();

    private bool showAuthenticationError = false;
    private string authenticationErrorText = "";

    private void Register()
    {
        NavManager.NavigateTo("/register");
    }

    private async Task ExecuteLogin()
    {
        showAuthenticationError = false;

        AuthenticatedUserModel result = await AuthService.LogIn(model);

        if (result is not null)
        {
            NavManager.NavigateTo("/", true);
        }
        else
        {
            authenticationErrorText = "Error while trying to log in.";
            showAuthenticationError = true;
        }
    }
}
